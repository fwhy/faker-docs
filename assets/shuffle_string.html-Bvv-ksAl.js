import{_ as s,c as n,a as e,o as t}from"./app-Du1u7NE4.js";const p={};function o(r,a){return t(),n("div",null,a[0]||(a[0]=[e(`<h1 id="shufflestring" tabindex="-1"><a class="header-anchor" href="#shufflestring"><span>shuffleString</span></a></h1><div class="language-php" data-highlighter="prismjs" data-ext="php"><pre><code class="language-php"><span class="line"><span class="token function">shuffleString</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$arg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$encoding</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;UTF-8&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">:</span><span class="token keyword return-type">string</span></span>
<span class="line"></span></code></pre></div><p>🇯🇵 🇺🇸<br> 引数で与えられた文字列をシャッフルして返します。 この関数は元の文字列を変更しません。<br> メルセンヌ・ツイスタとともに、バイアスのないフィッシャー–イェーツのシャッフルを使用します。<br> したがって、この関数はPHPの<code>shuffle()</code>関数よりもランダムであり、シード可能です。<br> さらに、mb拡張機能が使用可能な場合はUTF8で安全です。</p><h2 id="パラメータ" tabindex="-1"><a class="header-anchor" href="#パラメータ"><span>パラメータ</span></a></h2><h3 id="arg" tabindex="-1"><a class="header-anchor" href="#arg"><span><code>$arg</code></span></a></h3><p>シャッフルする文字列。</p><h3 id="encoding" tabindex="-1"><a class="header-anchor" href="#encoding"><span><code>$encoding</code></span></a></h3><p>文字列のエンコーディング。</p><h2 id="例" tabindex="-1"><a class="header-anchor" href="#例"><span>例</span></a></h2><div class="language-php" data-highlighter="prismjs" data-ext="php"><pre><code class="language-php"><span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token class-name class-name-fully-qualified static-context">Faker<span class="token punctuation">\\</span>Factory</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ja_JP&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">shuffleString</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;こんにちは　せかい！&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;こいちん　にか！はせ&quot;</span></span>
<span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token class-name class-name-fully-qualified static-context">Faker<span class="token punctuation">\\</span>Factory</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">shuffleString</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Hello World!&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;oerlHl odW!l&quot;</span></span>
<span class="line"></span></code></pre></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="https://ja.wikipedia.org/wiki/%E3%83%A1%E3%83%AB%E3%82%BB%E3%83%B3%E3%83%8C%E3%83%BB%E3%83%84%E3%82%A4%E3%82%B9%E3%82%BF" target="_blank" rel="noopener noreferrer">メルセンヌ・ツイスタ</a></li><li><a href="https://ja.wikipedia.org/wiki/%E3%83%95%E3%82%A3%E3%83%83%E3%82%B7%E3%83%A3%E3%83%BC%E2%80%93%E3%82%A4%E3%82%A7%E3%83%BC%E3%83%84%E3%81%AE%E3%82%B7%E3%83%A3%E3%83%83%E3%83%95%E3%83%AB" target="_blank" rel="noopener noreferrer">フィッシャー–イェーツのシャッフル</a></li></ul>`,12)]))}const i=s(p,[["render",o]]),c=JSON.parse('{"path":"/formatters/base/shuffle_string.html","title":"shuffleString","lang":"ja","frontmatter":{"description":"shuffleString 🇯🇵 🇺🇸 引数で与えられた文字列をシャッフルして返します。 この関数は元の文字列を変更しません。 メルセンヌ・ツイスタとともに、バイアスのないフィッシャー–イェーツのシャッフルを使用します。 したがって、この関数はPHPのshuffle()関数よりもランダムであり、シード可能です。 さらに、mb拡張機能が使用可能な...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"shuffleString\\",\\"image\\":[\\"/faker-docs/images/logo310.png\\"],\\"dateModified\\":\\"2020-10-20T16:41:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Fullwidth Hyphen\\",\\"url\\":\\"https://blare.fwhy.app/about/\\"}]}"],["meta",{"property":"og:url","content":"https://fwhy.github.io/faker-docs/formatters/base/shuffle_string.html"}],["meta",{"property":"og:site_name","content":"FakerPHP非公式リファレンス"}],["meta",{"property":"og:title","content":"shuffleString"}],["meta",{"property":"og:description","content":"shuffleString 🇯🇵 🇺🇸 引数で与えられた文字列をシャッフルして返します。 この関数は元の文字列を変更しません。 メルセンヌ・ツイスタとともに、バイアスのないフィッシャー–イェーツのシャッフルを使用します。 したがって、この関数はPHPのshuffle()関数よりもランダムであり、シード可能です。 さらに、mb拡張機能が使用可能な..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"/faker-docs/images/logo310.png"}],["meta",{"property":"og:locale","content":"ja"}],["meta",{"property":"og:updated_time","content":"2020-10-20T16:41:52.000Z"}],["meta",{"property":"article:modified_time","content":"2020-10-20T16:41:52.000Z"}],["link",{"rel":"canonical","href":"/faker-docs/formatters/base/shuffle_string.html"}]]},"git":{"updatedTime":1603212112000,"contributors":[{"name":"fwhy","username":"fwhy","email":"prog@fullwidth-hyphen.tech","commits":1,"url":"https://github.com/fwhy"}],"changelog":[{"hash":"91bcb65a436e79e9d7e0a7bd55d5e0f247f75234","time":1603212112000,"email":"prog@fullwidth-hyphen.tech","author":"fwhy","message":"add some"}]},"filePathRelative":"formatters/base/shuffle_string.md","autoDesc":true}');export{i as comp,c as data};
