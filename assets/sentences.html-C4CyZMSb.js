import{_ as s,c as n,a as e,o as t}from"./app-Du1u7NE4.js";const p={};function o(c,a){return t(),n("div",null,a[0]||(a[0]=[e(`<h1 id="sentences" tabindex="-1"><a class="header-anchor" href="#sentences"><span>sentences</span></a></h1><div class="language-php" data-highlighter="prismjs" data-ext="php"><pre><code class="language-php"><span class="line"><span class="token function">sentences</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$nb</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword type-hint">bool</span> <span class="token variable">$asText</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">:</span><span class="token keyword return-type">array</span><span class="token operator">|</span><span class="token keyword type-declaration">string</span></span>
<span class="line"></span></code></pre></div><p>🇯🇵 🇺🇸<br> ランダムな文を <code>$nb</code> 個生成します。</p><h2 id="パラメータ" tabindex="-1"><a class="header-anchor" href="#パラメータ"><span>パラメータ</span></a></h2><h3 id="nb" tabindex="-1"><a class="header-anchor" href="#nb"><span><code>$nb</code></span></a></h3><p>文の数を指定します。デフォルトは3。</p><h3 id="astext" tabindex="-1"><a class="header-anchor" href="#astext"><span><code>$asText</code></span></a></h3><p>文を文字列として返すかを指定します。デフォルトはfalseで、この場合は配列で返します。 trueの場合は半角スペースで結合した文字列を返します。</p><h2 id="例" tabindex="-1"><a class="header-anchor" href="#例"><span>例</span></a></h2><div class="language-php" data-highlighter="prismjs" data-ext="php"><pre><code class="language-php"><span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token class-name class-name-fully-qualified static-context">Faker<span class="token punctuation">\\</span>Factory</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ja_JP&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">sentences</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token punctuation">[</span></span>
<span class="line">     <span class="token string double-quoted-string">&quot;Nobis eaque enim ut est tempora.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">     <span class="token string double-quoted-string">&quot;In veniam quae earum debitis illum sed.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">     <span class="token string double-quoted-string">&quot;Pariatur corporis delectus molestiae totam velit.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">   <span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token class-name class-name-fully-qualified static-context">Faker<span class="token punctuation">\\</span>Factory</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">sentences</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;Aperiam odio et quaerat in cum fuga. Est ut qui consequatur esse accusamus soluta eligendi.&quot;</span></span>
<span class="line"></span></code></pre></div>`,10)]))}const r=s(p,[["render",o]]),i=JSON.parse('{"path":"/formatters/lorem/sentences.html","title":"sentences","lang":"ja","frontmatter":{"description":"sentences 🇯🇵 🇺🇸 ランダムな文を $nb 個生成します。 パラメータ $nb 文の数を指定します。デフォルトは3。 $asText 文を文字列として返すかを指定します。デフォルトはfalseで、この場合は配列で返します。 trueの場合は半角スペースで結合した文字列を返します。 例","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"sentences\\",\\"image\\":[\\"/faker-docs/images/logo310.png\\"],\\"dateModified\\":\\"2021-08-09T22:12:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Fullwidth Hyphen\\",\\"url\\":\\"https://blare.fwhy.app/about/\\"}]}"],["meta",{"property":"og:url","content":"https://fwhy.github.io/faker-docs/formatters/lorem/sentences.html"}],["meta",{"property":"og:site_name","content":"FakerPHP非公式リファレンス"}],["meta",{"property":"og:title","content":"sentences"}],["meta",{"property":"og:description","content":"sentences 🇯🇵 🇺🇸 ランダムな文を $nb 個生成します。 パラメータ $nb 文の数を指定します。デフォルトは3。 $asText 文を文字列として返すかを指定します。デフォルトはfalseで、この場合は配列で返します。 trueの場合は半角スペースで結合した文字列を返します。 例"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"/faker-docs/images/logo310.png"}],["meta",{"property":"og:locale","content":"ja"}],["meta",{"property":"og:updated_time","content":"2021-08-09T22:12:48.000Z"}],["meta",{"property":"article:modified_time","content":"2021-08-09T22:12:48.000Z"}],["link",{"rel":"canonical","href":"/faker-docs/formatters/lorem/sentences.html"}]]},"git":{"updatedTime":1628547168000,"contributors":[{"name":"fwhy","username":"fwhy","email":"prog@fullwidth-hyphen.tech","commits":1,"url":"https://github.com/fwhy"}],"changelog":[{"hash":"8a6a563c1fe22cfa9e019a0635f685a5b5ebe8c3","time":1628547168000,"email":"prog@fullwidth-hyphen.tech","author":"fwhy","message":"update some existing ones"}]},"filePathRelative":"formatters/lorem/sentences.md","autoDesc":true}');export{r as comp,i as data};
