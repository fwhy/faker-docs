import{_ as s,c as n,a as e,o as t}from"./app-Du1u7NE4.js";const p={};function o(r,a){return t(),n("div",null,a[0]||(a[0]=[e(`<h1 id="regexify" tabindex="-1"><a class="header-anchor" href="#regexify"><span>regexify</span></a></h1><div class="language-php" data-highlighter="prismjs" data-ext="php"><pre><code class="language-php"><span class="line"><span class="token function">regexify</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$regex</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">:</span><span class="token keyword return-type">string</span></span>
<span class="line"></span></code></pre></div><p>🇯🇵 🇺🇸 渡された正規表現に一致する文字列を生成します。</p><h2 id="パラメータ" tabindex="-1"><a class="header-anchor" href="#パラメータ"><span>パラメータ</span></a></h2><h3 id="regex" tabindex="-1"><a class="header-anchor" href="#regex"><span><code>$regex</code></span></a></h3><p>正規表現を指定します。<br> デリミタ(/.../)と行頭(^)、行末($)の記号は無視されます。</p><h2 id="例" tabindex="-1"><a class="header-anchor" href="#例"><span>例</span></a></h2><div class="language-php" data-highlighter="prismjs" data-ext="php"><pre><code class="language-php"><span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token class-name class-name-fully-qualified static-context">Faker<span class="token punctuation">\\</span>Factory</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ja_JP&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">regexify</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;[a-z][0-9]{3}&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;s450&quot;</span></span>
<span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token class-name class-name-fully-qualified static-context">Faker<span class="token punctuation">\\</span>Factory</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">regexify</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;\\\\w\\\\d{3}&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;w413&quot;</span></span>
<span class="line"></span></code></pre></div><h2 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意</span></a></h2><div class="hint-container warning"><p class="hint-container-title">注意:</p><p>この関数は <strong>とても</strong> 遅いです。<br> 別のもので代用できるのであればそちらを使用するようにしましょう。</p></div><div class="hint-container warning"><p class="hint-container-title">注意:</p><p>2バイト文字を返すような正規表現では正しく動作しません。</p><div class="language-php" data-highlighter="prismjs" data-ext="php"><pre><code class="language-php"><span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token class-name class-name-fully-qualified static-context">Faker<span class="token punctuation">\\</span>Factory</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ja_JP&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">regexify</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;[あ-ん]&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">=&gt;</span> b<span class="token string double-quoted-string">&quot;‚&quot;</span></span>
<span class="line"></span></code></pre></div></div>`,11)]))}const i=s(p,[["render",o]]),l=JSON.parse('{"path":"/formatters/base/regexify.html","title":"regexify","lang":"ja","frontmatter":{"description":"regexify 🇯🇵 🇺🇸 渡された正規表現に一致する文字列を生成します。 パラメータ $regex 正規表現を指定します。 デリミタ(/.../)と行頭(^)、行末($)の記号は無視されます。 例 注意 注意: この関数は とても 遅いです。 別のもので代用できるのであればそちらを使用するようにしましょう。 注意: 2バイト文字を返すような...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"regexify\\",\\"image\\":[\\"/faker-docs/images/logo310.png\\"],\\"dateModified\\":\\"2020-12-01T04:19:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Fullwidth Hyphen\\",\\"url\\":\\"https://blare.fwhy.app/about/\\"}]}"],["meta",{"property":"og:url","content":"https://fwhy.github.io/faker-docs/formatters/base/regexify.html"}],["meta",{"property":"og:site_name","content":"FakerPHP非公式リファレンス"}],["meta",{"property":"og:title","content":"regexify"}],["meta",{"property":"og:description","content":"regexify 🇯🇵 🇺🇸 渡された正規表現に一致する文字列を生成します。 パラメータ $regex 正規表現を指定します。 デリミタ(/.../)と行頭(^)、行末($)の記号は無視されます。 例 注意 注意: この関数は とても 遅いです。 別のもので代用できるのであればそちらを使用するようにしましょう。 注意: 2バイト文字を返すような..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"/faker-docs/images/logo310.png"}],["meta",{"property":"og:locale","content":"ja"}],["meta",{"property":"og:updated_time","content":"2020-12-01T04:19:57.000Z"}],["meta",{"property":"article:modified_time","content":"2020-12-01T04:19:57.000Z"}],["link",{"rel":"canonical","href":"/faker-docs/formatters/base/regexify.html"}]]},"git":{"updatedTime":1606796397000,"contributors":[{"name":"fwhy","username":"fwhy","email":"prog@fullwidth-hyphen.tech","commits":1,"url":"https://github.com/fwhy"}],"changelog":[{"hash":"8cd3dffc61b1668750f79a8cd174b674441160ec","time":1606796397000,"email":"prog@fullwidth-hyphen.tech","author":"fwhy","message":"add some"}]},"filePathRelative":"formatters/base/regexify.md","autoDesc":true}');export{i as comp,l as data};
