import{_ as s,c as n,a as e,o as t}from"./app-Du1u7NE4.js";const p={};function o(r,a){return t(),n("div",null,a[0]||(a[0]=[e(`<h1 id="paragraphs" tabindex="-1"><a class="header-anchor" href="#paragraphs"><span>paragraphs</span></a></h1><div class="language-php" data-highlighter="prismjs" data-ext="php"><pre><code class="language-php"><span class="line"><span class="token function">paragraphs</span><span class="token punctuation">(</span><span class="token variable">$nb</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token variable">$asText</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">:</span><span class="token keyword return-type">array</span><span class="token operator">|</span><span class="token keyword type-declaration">string</span></span>
<span class="line"></span></code></pre></div><p>🇯🇵 🇺🇸<br> ランダムな段落を <code>$nb</code> 個生成します。</p><h2 id="パラメータ" tabindex="-1"><a class="header-anchor" href="#パラメータ"><span>パラメータ</span></a></h2><h3 id="nb" tabindex="-1"><a class="header-anchor" href="#nb"><span><code>$nb</code></span></a></h3><p>段落の数を指定します。デフォルトは3。</p><h3 id="astext" tabindex="-1"><a class="header-anchor" href="#astext"><span><code>$asText</code></span></a></h3><p>段落を文字列として返すかを指定します。デフォルトはfalseで、この場合は配列で返します。 trueの場合は改行コード2個（&#39;\\n\\n&#39;）で結合した文字列を返します。</p><h2 id="例" tabindex="-1"><a class="header-anchor" href="#例"><span>例</span></a></h2><div class="language-php" data-highlighter="prismjs" data-ext="php"><pre><code class="language-php"><span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token class-name class-name-fully-qualified static-context">Faker<span class="token punctuation">\\</span>Factory</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ja_JP&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">paragraphs</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token punctuation">[</span></span>
<span class="line">     <span class="token string double-quoted-string">&quot;Nemo placeat dicta quibusdam aut in saepe adipisci. Quo quas iure veritatis voluptas. Est sed assumenda deserunt. Fugit eos qui facilis quasi nisi. Eius aliquid nesciunt non saepe occaecati blanditiis.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">     <span class="token string double-quoted-string">&quot;Sed voluptatem ex maiores recusandae et excepturi. Id nostrum voluptatem dolorem dolorum aut aut hic. Eveniet officiis dolor voluptatum dolores.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">     <span class="token string double-quoted-string">&quot;Repellendus non est neque vitae mollitia debitis numquam. Consequatur cumque soluta quia rerum nihil. Qui hic dolor aut delectus et quia tempora. Rerum ratione rem velit dolorem ut praesentium est explicabo.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">   <span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token class-name class-name-fully-qualified static-context">Faker<span class="token punctuation">\\</span>Factory</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">paragraphs</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;&quot;</span><span class="token string double-quoted-string">&quot;</span>
<span class="line">   Atque pariatur vel culpa architecto soluta. Qui ea incidunt rerum id. Nam ut rem est omnis. Excepturi fuga expedita et est ratione quos rerum cupiditate. Perferendis mollitia nesciunt et est sunt.\\n</span>
<span class="line">   \\n</span>
<span class="line">   Ut quos labore numquam et earum. Neque eum nihil esse accusamus ut autem. Vel aut illum saepe maxime deleniti voluptatem. Est corporis quibusdam eum est.</span>
<span class="line">   &quot;</span><span class="token string double-quoted-string">&quot;&quot;</span></span>
<span class="line"></span></code></pre></div>`,10)]))}const l=s(p,[["render",o]]),i=JSON.parse(`{"path":"/formatters/lorem/paragraphs.html","title":"paragraphs","lang":"ja","frontmatter":{"description":"paragraphs 🇯🇵 🇺🇸 ランダムな段落を $nb 個生成します。 パラメータ $nb 段落の数を指定します。デフォルトは3。 $asText 段落を文字列として返すかを指定します。デフォルトはfalseで、この場合は配列で返します。 trueの場合は改行コード2個（'\\\\n\\\\n'）で結合した文字列を返します。 例","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"paragraphs\\",\\"image\\":[\\"/faker-docs/images/logo310.png\\"],\\"dateModified\\":\\"2021-08-09T22:12:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Fullwidth Hyphen\\",\\"url\\":\\"https://blare.fwhy.app/about/\\"}]}"],["meta",{"property":"og:url","content":"https://fwhy.github.io/faker-docs/formatters/lorem/paragraphs.html"}],["meta",{"property":"og:site_name","content":"FakerPHP非公式リファレンス"}],["meta",{"property":"og:title","content":"paragraphs"}],["meta",{"property":"og:description","content":"paragraphs 🇯🇵 🇺🇸 ランダムな段落を $nb 個生成します。 パラメータ $nb 段落の数を指定します。デフォルトは3。 $asText 段落を文字列として返すかを指定します。デフォルトはfalseで、この場合は配列で返します。 trueの場合は改行コード2個（'\\\\n\\\\n'）で結合した文字列を返します。 例"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"/faker-docs/images/logo310.png"}],["meta",{"property":"og:locale","content":"ja"}],["meta",{"property":"og:updated_time","content":"2021-08-09T22:12:48.000Z"}],["meta",{"property":"article:modified_time","content":"2021-08-09T22:12:48.000Z"}],["link",{"rel":"canonical","href":"/faker-docs/formatters/lorem/paragraphs.html"}]]},"git":{"updatedTime":1628547168000,"contributors":[{"name":"fwhy","username":"fwhy","email":"prog@fullwidth-hyphen.tech","commits":1,"url":"https://github.com/fwhy"}],"changelog":[{"hash":"8a6a563c1fe22cfa9e019a0635f685a5b5ebe8c3","time":1628547168000,"email":"prog@fullwidth-hyphen.tech","author":"fwhy","message":"update some existing ones"}]},"filePathRelative":"formatters/lorem/paragraphs.md","autoDesc":true}`);export{l as comp,i as data};
